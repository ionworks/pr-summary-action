{
  "created_at": "2025-07-12T15:35:20.844436",
  "test_cases": [
    {
      "id": "pr_28340_react",
      "pr_number": 28340,
      "title": "[Fizz] Align recoverable error serialization in dev mode",
      "body": "Same as #28327 but for Fizz.\r\n\r\nOne thing that's weird about this recoverable error is that we don't send the regular stack for it, just the component stack it seems. This is missing some potential information and if we move toward integrated since stacks it would be one thing.\r\n",
      "diff": "diff --git a/packages/react-client/src/__tests__/ReactFlight-test.js b/packages/react-client/src/__tests__/ReactFlight-test.js\nindex f4a5929a2dd72..06dee1d54ed22 100644\n--- a/packages/react-client/src/__tests__/ReactFlight-test.js\n+++ b/packages/react-client/src/__tests__/ReactFlight-test.js\n@@ -85,11 +85,11 @@ describe('ReactFlight', () => {\n           );\n           let expectedDigest = this.props.expectedMessage;\n           if (\n-            expectedDigest.startsWith('Error: {') ||\n-            expectedDigest.startsWith('Error: <')\n+            expectedDigest.startsWith('{') ||\n+            expectedDigest.startsWith('<')\n           ) {\n             expectedDigest = '{}';\n-          } else if (expectedDigest.startsWith('Error: [')) {\n+          } else if (expectedDigest.startsWith('[')) {\n             expectedDigest = '[]';\n           }\n           expect(this.state.error.digest).toContain(expectedDigest);\n@@ -799,12 +799,12 @@ describe('ReactFlight', () => {\n             <Throw value={new TypeError('This is a real Error.')} />\n           </div>\n         </ClientErrorBoundary>\n-        <ClientErrorBoundary expectedMessage=\"Error: This is a string error.\">\n+        <ClientErrorBoundary expectedMessage=\"This is a string error.\">\n           <div>\n             <Throw value=\"This is a string error.\" />\n           </div>\n         </ClientErrorBoundary>\n-        <ClientErrorBoundary expectedMessage=\"Error: {message: ..., extra: ..., nested: ...}\">\n+        <ClientErrorBoundary expectedMessage=\"{message: ..., extra: ..., nested: ...}\">\n           <div>\n             <Throw\n               value={{\n@@ -816,9 +816,7 @@ describe('ReactFlight', () => {\n           </div>\n         </ClientErrorBoundary>\n         <ClientErrorBoundary\n-          expectedMessage={\n-            'Error: {message: \"Short\", extra: ..., nested: ...}'\n-          }>\n+          expectedMessage={'{message: \"Short\", extra: ..., nested: ...}'}>\n           <div>\n             <Throw\n               value={{\n@@ -829,32 +827,32 @@ describe('ReactFlight', () => {\n             />\n           </div>\n         </ClientErrorBoundary>\n-        <ClientErrorBoundary expectedMessage=\"Error: Symbol(hello)\">\n+        <ClientErrorBoundary expectedMessage=\"Symbol(hello)\">\n           <div>\n             <Throw value={Symbol('hello')} />\n           </div>\n         </ClientErrorBoundary>\n-        <ClientErrorBoundary expectedMessage=\"Error: 123\">\n+        <ClientErrorBoundary expectedMessage=\"123\">\n           <div>\n             <Throw value={123} />\n           </div>\n         </ClientErrorBoundary>\n-        <ClientErrorBoundary expectedMessage=\"Error: undefined\">\n+        <ClientErrorBoundary expectedMessage=\"undefined\">\n           <div>\n             <Throw value={undefined} />\n           </div>\n         </ClientErrorBoundary>\n-        <ClientErrorBoundary expectedMessage=\"Error: <div/>\">\n+        <ClientErrorBoundary expectedMessage=\"<div/>\">\n           <div>\n             <Throw value={<div />} />\n           </div>\n         </ClientErrorBoundary>\n-        <ClientErrorBoundary expectedMessage=\"Error: function Foo() {}\">\n+        <ClientErrorBoundary expectedMessage=\"function Foo() {}\">\n           <div>\n             <Throw value={function Foo() {}} />\n           </div>\n         </ClientErrorBoundary>\n-        <ClientErrorBoundary expectedMessage={'Error: [\"array\"]'}>\n+        <ClientErrorBoundary expectedMessage={'[\"array\"]'}>\n           <div>\n             <Throw value={['array']} />\n           </div>\n@@ -874,7 +872,7 @@ describe('ReactFlight', () => {\n         } else if (typeof x === 'object' && x !== null) {\n           return `digest({})`;\n         }\n-        return `digest(Error: ${String(x)})`;\n+        return `digest(${String(x)})`;\n       },\n     });\n \ndiff --git a/packages/react-server-dom-webpack/src/__tests__/ReactFlightDOM-test.js b/packages/react-server-dom-webpack/src/__tests__/ReactFlightDOM-test.js\nindex 91ba06dd329b9..465123f825500 100644\n--- a/packages/react-server-dom-webpack/src/__tests__/ReactFlightDOM-test.js\n+++ b/packages/react-server-dom-webpack/src/__tests__/ReactFlightDOM-test.js\n@@ -919,9 +919,7 @@ describe('ReactFlightDOM', () => {\n       abort('for reasons');\n     });\n     if (__DEV__) {\n-      expect(container.innerHTML).toBe(\n-        '<p>Error: for reasons + a dev digest</p>',\n-      );\n+      expect(container.innerHTML).toBe('<p>for reasons + a dev digest</p>');\n     } else {\n       expect(container.innerHTML).toBe('<p>digest(\"for reasons\")</p>');\n     }\ndiff --git a/packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMBrowser-test.js b/packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMBrowser-test.js\nindex 2427317ce2c32..f8f3a1c3f2877 100644\n--- a/packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMBrowser-test.js\n+++ b/packages/react-server-dom-webpack/src/__tests__/ReactFlightDOMBrowser-test.js\n@@ -583,7 +583,7 @@ describe('ReactFlightDOMBrowser', () => {\n       controller.abort('for reasons');\n     });\n     const expectedValue = __DEV__\n-      ? '<p>Error: for reasons + a dev digest</p>'\n+      ? '<p>for reasons + a dev digest</p>'\n       : '<p>digest(\"for reasons\")</p>';\n     expect(container.innerHTML).toBe(expectedValue);\n \ndiff --git a/packages/react-server/src/ReactFizzServer.js b/packages/react-server/src/ReactFizzServer.js\nindex a928b2651a934..e8ea394386df6 100644\n--- a/packages/react-server/src/ReactFizzServer.js\n+++ b/packages/react-server/src/ReactFizzServer.js\n@@ -33,6 +33,7 @@ import type {ComponentStackNode} from './ReactFizzComponentStack';\n import type {TreeContext} from './ReactFizzTreeContext';\n import type {ThenableState} from './ReactFizzThenable';\n import {enableRenderableContext} from 'shared/ReactFeatureFlags';\n+import {describeObjectForErrorMessage} from 'shared/ReactSerializationErrors';\n \n import {\n   scheduleWork,\n@@ -816,18 +817,19 @@ function encodeErrorForBoundary(\n ) {\n   boundary.errorDigest = digest;\n   if (__DEV__) {\n+    let message;\n     // In dev we additionally encode the error message and component stack on the boundary\n-    let errorMessage;\n-    if (typeof error === 'string') {\n-      errorMessage = error;\n-    } else if (error && typeof error.message === 'string') {\n-      errorMessage = error.message;\n+    if (error instanceof Error) {\n+      // eslint-disable-next-line react-internal/safe-string-coercion\n+      message = String(error.message);\n+    } else if (typeof error === 'object' && error !== null) {\n+      message = describeObjectForErrorMessage(error);\n     } else {\n       // eslint-disable-next-line react-internal/safe-string-coercion\n-      errorMessage = String(error);\n+      message = String(error);\n     }\n \n-    boundary.errorMessage = errorMessage;\n+    boundary.errorMessage = message;\n     boundary.errorComponentStack = thrownInfo.componentStack;\n   }\n }\ndiff --git a/packages/react-server/src/ReactFlightServer.js b/packages/react-server/src/ReactFlightServer.js\nindex 4c81931223e46..072a71b03dcc5 100644\n--- a/packages/react-server/src/ReactFlightServer.js\n+++ b/packages/react-server/src/ReactFlightServer.js\n@@ -1678,10 +1678,10 @@ function emitErrorChunk(\n         // eslint-disable-next-line react-internal/safe-string-coercion\n         stack = String(error.stack);\n       } else if (typeof error === 'object' && error !== null) {\n-        message = 'Error: ' + describeObjectForErrorMessage(error);\n+        message = describeObjectForErrorMessage(error);\n       } else {\n         // eslint-disable-next-line react-internal/safe-string-coercion\n-        message = 'Error: ' + String(error);\n+        message = String(error);\n       }\n     } catch (x) {\n       message = 'An error occurred but serializing the error message failed.';\n",
      "author": "sebmarkbage",
      "repo": "facebook/react",
      "labels": [
        "CLA Signed",
        "React Core Team"
      ],
      "expected_technical": null,
      "expected_marketing": null,
      "difficulty": "medium",
      "category": "bugfix"
    },
    {
      "id": "pr_28338_react",
      "pr_number": 28338,
      "title": "Remove ReactTestUtils from ReactJSXTransformIntegration",
      "body": null,
      "diff": "diff --git a/packages/react/src/__tests__/ReactJSXTransformIntegration-test.js b/packages/react/src/__tests__/ReactJSXTransformIntegration-test.js\nindex 6f764db3b11ce..9485db97be4ea 100644\n--- a/packages/react/src/__tests__/ReactJSXTransformIntegration-test.js\n+++ b/packages/react/src/__tests__/ReactJSXTransformIntegration-test.js\n@@ -11,7 +11,6 @@\n \n let React;\n let ReactDOMClient;\n-let ReactTestUtils;\n let act;\n \n // TODO: Historically this module was used to confirm that the JSX transform\n@@ -30,7 +29,6 @@ describe('ReactJSXTransformIntegration', () => {\n \n     React = require('react');\n     ReactDOMClient = require('react-dom/client');\n-    ReactTestUtils = require('react-dom/test-utils');\n     act = require('internal-test-utils').act;\n \n     Component = class extends React.Component {\n@@ -213,7 +211,7 @@ describe('ReactJSXTransformIntegration', () => {\n     expect(instance.props.fruit).toBe('persimmon');\n   });\n \n-  it('should normalize props with default values', () => {\n+  it('should normalize props with default values', async () => {\n     class NormalizingComponent extends React.Component {\n       render() {\n         return <span>{this.props.prop}</span>;\n@@ -221,14 +219,26 @@ describe('ReactJSXTransformIntegration', () => {\n     }\n     NormalizingComponent.defaultProps = {prop: 'testKey'};\n \n-    const instance = ReactTestUtils.renderIntoDocument(\n-      <NormalizingComponent />,\n-    );\n+    let container = document.createElement('div');\n+    let root = ReactDOMClient.createRoot(container);\n+    let instance;\n+    await act(() => {\n+      root.render(\n+        <NormalizingComponent ref={current => (instance = current)} />,\n+      );\n+    });\n+\n     expect(instance.props.prop).toBe('testKey');\n \n-    const inst2 = ReactTestUtils.renderIntoDocument(\n-      <NormalizingComponent prop={null} />,\n-    );\n+    container = document.createElement('div');\n+    root = ReactDOMClient.createRoot(container);\n+    let inst2;\n+    await act(() => {\n+      root.render(\n+        <NormalizingComponent prop={null} ref={current => (inst2 = current)} />,\n+      );\n+    });\n+\n     expect(inst2.props.prop).toBe(null);\n   });\n });\n",
      "author": "eps1lon",
      "repo": "facebook/react",
      "labels": [
        "CLA Signed",
        "React Core Team"
      ],
      "expected_technical": null,
      "expected_marketing": null,
      "difficulty": "easy",
      "category": "general"
    },
    {
      "id": "pr_28337_react",
      "pr_number": 28337,
      "title": "Remove ReactTestUtils from ReactJSXRuntime",
      "body": null,
      "diff": "diff --git a/packages/react/src/__tests__/ReactJSXRuntime-test.js b/packages/react/src/__tests__/ReactJSXRuntime-test.js\nindex 713430fa5ead9..28478faed031b 100644\n--- a/packages/react/src/__tests__/ReactJSXRuntime-test.js\n+++ b/packages/react/src/__tests__/ReactJSXRuntime-test.js\n@@ -12,7 +12,6 @@\n let React;\n let ReactDOM;\n let ReactDOMClient;\n-let ReactTestUtils;\n let JSXRuntime;\n let JSXDEVRuntime;\n let act;\n@@ -29,7 +28,6 @@ describe('ReactJSXRuntime', () => {\n     JSXDEVRuntime = require('react/jsx-dev-runtime');\n     ReactDOM = require('react-dom');\n     ReactDOMClient = require('react-dom/client');\n-    ReactTestUtils = require('react-dom/test-utils');\n     act = require('internal-test-utils').act;\n   });\n \n@@ -72,7 +70,7 @@ describe('ReactJSXRuntime', () => {\n     expect(container.firstChild.textContent).toBe('persimmon');\n   });\n \n-  it('should normalize props with default values', () => {\n+  it('should normalize props with default values', async () => {\n     class Component extends React.Component {\n       render() {\n         return JSXRuntime.jsx('span', {children: this.props.prop});\n@@ -80,18 +78,33 @@ describe('ReactJSXRuntime', () => {\n     }\n     Component.defaultProps = {prop: 'testKey'};\n \n-    const instance = ReactTestUtils.renderIntoDocument(\n-      JSXRuntime.jsx(Component, {}),\n-    );\n+    let container = document.createElement('div');\n+    let root = ReactDOMClient.createRoot(container);\n+    let instance;\n+    await act(() => {\n+      root.render(\n+        JSXRuntime.jsx(Component, {ref: current => (instance = current)}),\n+      );\n+    });\n+\n     expect(instance.props.prop).toBe('testKey');\n \n-    const inst2 = ReactTestUtils.renderIntoDocument(\n-      JSXRuntime.jsx(Component, {prop: null}),\n-    );\n+    container = document.createElement('div');\n+    root = ReactDOMClient.createRoot(container);\n+    let inst2;\n+    await act(() => {\n+      root.render(\n+        JSXRuntime.jsx(Component, {\n+          prop: null,\n+          ref: current => (inst2 = current),\n+        }),\n+      );\n+    });\n+\n     expect(inst2.props.prop).toBe(null);\n   });\n \n-  it('throws when changing a prop (in dev) after element creation', () => {\n+  it('throws when changing a prop (in dev) after element creation', async () => {\n     class Outer extends React.Component {\n       render() {\n         const el = JSXRuntime.jsx('div', {className: 'moo'});\n@@ -109,9 +122,13 @@ describe('ReactJSXRuntime', () => {\n         return el;\n       }\n     }\n-    const outer = ReactTestUtils.renderIntoDocument(\n-      JSXRuntime.jsx(Outer, {color: 'orange'}),\n-    );\n+    const container = document.createElement('div');\n+    const root = ReactDOMClient.createRoot(container);\n+    await act(() => {\n+      root.render(JSXRuntime.jsx(Outer, {color: 'orange'}));\n+    });\n+\n+    const outer = container.firstChild;\n     if (__DEV__) {\n       expect(ReactDOM.findDOMNode(outer).className).toBe('moo');\n     } else {\n@@ -151,15 +168,24 @@ describe('ReactJSXRuntime', () => {\n     }\n   });\n \n-  it('does not warn for NaN props', () => {\n+  it('does not warn for NaN props', async () => {\n     class Test extends React.Component {\n       render() {\n         return JSXRuntime.jsx('div', {});\n       }\n     }\n-    const test = ReactTestUtils.renderIntoDocument(\n-      JSXRuntime.jsx(Test, {value: +undefined}),\n-    );\n+    const container = document.createElement('div');\n+    const root = ReactDOMClient.createRoot(container);\n+    let test;\n+    await act(() => {\n+      root.render(\n+        JSXRuntime.jsx(Test, {\n+          value: +undefined,\n+          ref: current => (test = current),\n+        }),\n+      );\n+    });\n+\n     expect(test.props.value).toBeNaN();\n   });\n \n",
      "author": "eps1lon",
      "repo": "facebook/react",
      "labels": [
        "CLA Signed",
        "React Core Team"
      ],
      "expected_technical": null,
      "expected_marketing": null,
      "difficulty": "medium",
      "category": "general"
    }
  ]
}