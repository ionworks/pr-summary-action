{
  "created_at": "2025-07-12T15:36:03.088224",
  "test_cases": [
    {
      "id": "pr_249681_vscode",
      "pr_number": 249681,
      "title": "chat bubbles for requests",
      "body": "<!-- Thank you for submitting a Pull Request. Please:\r\n* Read our Pull Request guidelines:\r\n  https://github.com/microsoft/vscode/wiki/How-to-Contribute#pull-requests\r\n* Associate an issue with the Pull Request.\r\n* Ensure that the code is up-to-date with the `main` branch.\r\n* Include a description of the proposed changes and how to test them.\r\n-->\r\n\r\ncc. @kkbrooks @roblourens \r\n",
      "diff": "diff --git a/build/lib/stylelint/vscode-known-variables.json b/build/lib/stylelint/vscode-known-variables.json\nindex bbb9be5de07a4..5db48ef1561aa 100644\n--- a/build/lib/stylelint/vscode-known-variables.json\n+++ b/build/lib/stylelint/vscode-known-variables.json\n@@ -57,6 +57,8 @@\n \t\t\"--vscode-chat-requestBorder\",\n \t\t\"--vscode-chat-slashCommandBackground\",\n \t\t\"--vscode-chat-slashCommandForeground\",\n+\t\t\"--vscode-chat-requestCodeBorder\",\n+\t\t\"--vscode-chat-requestBubbleBackground\",\n \t\t\"--vscode-checkbox-background\",\n \t\t\"--vscode-checkbox-border\",\n \t\t\"--vscode-checkbox-disabled-background\",\ndiff --git a/src/vs/workbench/contrib/chat/browser/chatListRenderer.ts b/src/vs/workbench/contrib/chat/browser/chatListRenderer.ts\nindex 08f3fd8c1eea8..0a91b03445fdd 100644\n--- a/src/vs/workbench/contrib/chat/browser/chatListRenderer.ts\n+++ b/src/vs/workbench/contrib/chat/browser/chatListRenderer.ts\n@@ -90,6 +90,7 @@ interface IChatListItemTemplate {\n \trenderedParts?: IChatContentPart[];\n \treadonly rowContainer: HTMLElement;\n \treadonly titleToolbar?: MenuWorkbenchToolBar;\n+\treadonly header?: HTMLElement;\n \treadonly footerToolbar: MenuWorkbenchToolBar;\n \treadonly avatarContainer: HTMLElement;\n \treadonly username: HTMLElement;\n@@ -304,16 +305,6 @@ export class ChatListItemRenderer extends Disposable implements ITreeRenderer<Ch\n \t\t}\n \n \t\tconst header = dom.append(headerParent, $('.header'));\n-\t\tconst user = dom.append(header, $('.user'));\n-\t\tconst avatarContainer = dom.append(user, $('.avatar-container'));\n-\t\tconst username = dom.append(user, $('h3.username'));\n-\t\tusername.tabIndex = 0;\n-\t\tconst detailContainer = dom.append(detailContainerParent ?? user, $('span.detail-container'));\n-\t\tconst detail = dom.append(detailContainer, $('span.detail'));\n-\t\tdom.append(detailContainer, $('span.chat-animated-ellipsis'));\n-\t\tconst value = dom.append(valueParent, $('.value'));\n-\t\tconst elementDisposables = new DisposableStore();\n-\n \t\tconst contextKeyService = templateDisposables.add(this.contextKeyService.createScoped(rowContainer));\n \t\tconst scopedInstantiationService = templateDisposables.add(this.instantiationService.createChild(new ServiceCollection([IContextKeyService, contextKeyService])));\n \n@@ -330,6 +321,17 @@ export class ChatListItemRenderer extends Disposable implements ITreeRenderer<Ch\n \t\t\t\t},\n \t\t\t}));\n \t\t}\n+\t\tconst user = dom.append(header, $('.user'));\n+\t\tconst avatarContainer = dom.append(user, $('.avatar-container'));\n+\t\tconst username = dom.append(user, $('h3.username'));\n+\t\tusername.tabIndex = 0;\n+\t\tconst detailContainer = dom.append(detailContainerParent ?? user, $('span.detail-container'));\n+\t\tconst detail = dom.append(detailContainer, $('span.detail'));\n+\t\tdom.append(detailContainer, $('span.chat-animated-ellipsis'));\n+\t\tconst value = dom.append(valueParent, $('.value'));\n+\t\tconst elementDisposables = new DisposableStore();\n+\n+\n \n \t\tconst footerToolbarContainer = dom.append(rowContainer, $('.chat-footer-toolbar'));\n \t\tconst footerToolbar = templateDisposables.add(scopedInstantiationService.createInstance(MenuWorkbenchToolBar, footerToolbarContainer, MenuId.ChatMessageFooter, {\n@@ -366,7 +368,7 @@ export class ChatListItemRenderer extends Disposable implements ITreeRenderer<Ch\n \t\t\t\tthis.hoverService.hideHover();\n \t\t\t}\n \t\t}));\n-\t\tconst template: IChatListItemTemplate = { avatarContainer, username, detail, value, rowContainer, elementDisposables, templateDisposables, contextKeyService, instantiationService: scopedInstantiationService, agentHover, titleToolbar, footerToolbar };\n+\t\tconst template: IChatListItemTemplate = { header, avatarContainer, username, detail, value, rowContainer, elementDisposables, templateDisposables, contextKeyService, instantiationService: scopedInstantiationService, agentHover, titleToolbar, footerToolbar };\n \t\treturn template;\n \t}\n \n@@ -436,6 +438,10 @@ export class ChatListItemRenderer extends Disposable implements ITreeRenderer<Ch\n \t\t\tthis.renderConfirmationAction(element, templateData);\n \t\t}\n \n+\t\t// TODO: @justschen decide if we want to hide the header for requests or not\n+\t\t// const shouldShowHeader = isResponseVM(element) && !this.rendererOptions.noHeader;\n+\t\t// templateData.header?.classList.toggle('hidden', !shouldShowHeader);\n+\n \t\t// Do a progressive render if\n \t\t// - This the last response in the list\n \t\t// - And it has some content\ndiff --git a/src/vs/workbench/contrib/chat/browser/codeBlockPart.css b/src/vs/workbench/contrib/chat/browser/codeBlockPart.css\nindex 901afc3a57b53..0390217697bef 100644\n--- a/src/vs/workbench/contrib/chat/browser/codeBlockPart.css\n+++ b/src/vs/workbench/contrib/chat/browser/codeBlockPart.css\n@@ -64,8 +64,15 @@\n }\n \n .interactive-result-code-block {\n+\tbox-shadow: 0px 2px 16px 0px rgba(0, 0, 0, 0.10);\n+}\n+\n+.interactive-session .interactive-request .interactive-result-code-block {\n+\tborder: 1px solid var(--vscode-chat-requestCodeBorder);\n+}\n+\n+.interactive-session .interactive-response .interactive-result-code-block {\n \tborder: 1px solid var(--vscode-input-border, transparent);\n-\tbackground-color: var(--vscode-interactive-result-editor-background-color);\n }\n \n .interactive-result-code-block:has(.monaco-editor.focused) {\n@@ -165,3 +172,8 @@\n .interactive-result-code-block.compare.no-diff .interactive-result-editor {\n \tdisplay: none;\n }\n+\n+.interactive-session .interactive-request .value .interactive-result-code-block .monaco-editor .overflow-guard,\n+.interactive-session .interactive-request .value .monaco-editor {\n+\twidth: 100% !important;\n+}\ndiff --git a/src/vs/workbench/contrib/chat/browser/media/chat.css b/src/vs/workbench/contrib/chat/browser/media/chat.css\nindex 489713a0dc687..02f0ff9ebbd43 100644\n--- a/src/vs/workbench/contrib/chat/browser/media/chat.css\n+++ b/src/vs/workbench/contrib/chat/browser/media/chat.css\n@@ -156,9 +156,9 @@\n \tpadding: 2px;\n }\n \n-.interactive-item-container .header .monaco-toolbar {\n+.interactive-item-container.interactive-response .header .monaco-toolbar {\n \tposition: absolute;\n-\tright: 0px;\n+\tleft: 0px;\n \tbackground-color: var(--vscode-chat-list-background);\n }\n \n@@ -286,7 +286,8 @@\n }\n \n .interactive-item-container .value > :last-child,\n-.interactive-item-container .value > :last-child.rendered-markdown > :last-child {\n+.interactive-item-container .value > :last-child.rendered-markdown > :last-child,\n+.interactive-item-container.interactive-request .value .rendered-markdown > :last-child {\n \tmargin-bottom: 0px;\n }\n \n@@ -1310,18 +1311,10 @@ have to be updated for changes to the rules above, or to support more deeply nes\n \tflex-wrap: wrap;\n }\n \n-.interactive-session .interactive-item-container.interactive-request .chat-attached-context {\n-\tmargin-top: -8px;\n-}\n-\n .interactive-session .interactive-item-container.interactive-item-compact.interactive-request .chat-attached-context {\n \tmargin-top: -4px;\n }\n \n-.interactive-session .interactive-item-container.editing-session.interactive-request .chat-attached-context {\n-\tmargin-top: 0px;\n-}\n-\n .interactive-session .chat-attached-context .chat-attached-context-attachment.implicit {\n \tdisplay: flex;\n \tgap: 4px;\n@@ -1822,9 +1815,6 @@ have to be updated for changes to the rules above, or to support more deeply nes\n \tbottom: 7px;\n \tright: 12px;\n \tborder-radius: 100%;\n-\twidth: initial;\n-\twidth: 27px;\n-\theight: 27px;\n \twidth: 27px;\n \theight: 27px;\n \n@@ -1878,6 +1868,58 @@ have to be updated for changes to the rules above, or to support more deeply nes\n \tdisplay: none;\n }\n \n+.pane-body,\n+.quick-input-html-widget {\n+\n+\t.interactive-item-container.interactive-request {\n+\t\talign-items: flex-end;\n+\t\tpadding-bottom: 0px;\n+\t}\n+\n+\t.interactive-item-container.interactive-request .value .rendered-markdown {\n+\t\tbackground-color: var(--vscode-chat-requestBubbleBackground);\n+\t\tborder-radius: 8px;\n+\t\tpadding: 8px 12px;\n+\t\tmax-width: 90%;\n+\t\tmargin-left: auto;\n+\t\twidth: fit-content;\n+\t\tmargin-bottom: 5px;\n+\t\tbox-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n+\t\tposition: relative;\n+\t}\n+\n+\t.interactive-item-container.interactive-request .value .rendered-markdown {\n+\t\tmargin-left: auto;\n+\t}\n+\n+\t.interactive-item-container.interactive-request .value .rendered-markdown > :last-child {\n+\t\tmargin-bottom: 0px;\n+\t}\n+\n+\t.interactive-item-container.interactive-request .value > .rendered-markdown p {\n+\t\tmargin-left: auto;\n+\t\twidth: fit-content;\n+\t}\n+\n+\t.interactive-session .interactive-item-container.interactive-request .chat-attached-context {\n+\t\tmargin-top: 10px;\n+\t\tmax-width: 100%;\n+\t\twidth: fit-content;\n+\t\tjustify-content: flex-end;\n+\t\tmargin-left: auto;\n+\t}\n+\n+\t.hc-black .interactive-item-container.interactive-request .value,\n+\t.hc-light .interactive-item-container.interactive-request .value {\n+\t\toutline: 1px solid var(--vscode-chat-requestBorder);\n+\t\tbox-shadow: none;\n+\t}\n+\n+\t.interactive-session .interactive-request .header.hidden {\n+\t\tdisplay: none;\n+\t}\n+}\n+\n .chat-buttons-container {\n \tdisplay: flex;\n \tgap: 8px;\ndiff --git a/src/vs/workbench/contrib/chat/common/chatColors.ts b/src/vs/workbench/contrib/chat/common/chatColors.ts\nindex 94a47a1b6493d..453c6192b61be 100644\n--- a/src/vs/workbench/contrib/chat/common/chatColors.ts\n+++ b/src/vs/workbench/contrib/chat/common/chatColors.ts\n@@ -5,7 +5,7 @@\n \n import { Color, RGBA } from '../../../../base/common/color.js';\n import { localize } from '../../../../nls.js';\n-import { badgeBackground, badgeForeground, contrastBorder, editorBackground, editorWidgetBackground, foreground, registerColor, transparent } from '../../../../platform/theme/common/colorRegistry.js';\n+import { badgeBackground, badgeForeground, contrastBorder, editorBackground, editorSelectionBackground, editorWidgetBackground, foreground, registerColor, transparent } from '../../../../platform/theme/common/colorRegistry.js';\n \n export const chatRequestBorder = registerColor(\n \t'chat.requestBorder',\n@@ -53,3 +53,7 @@ export const chatEditedFileForeground = registerColor(\n \t},\n \tlocalize('chat.editedFileForeground', 'The foreground color of a chat edited file in the edited file list.')\n );\n+\n+export const chatRequestCodeBorder = registerColor('chat.requestCodeBorder', { dark: '#004972B8', light: '#0e639c40', hcDark: null, hcLight: null }, localize('chat.requestCodeBorder', 'Border color of code blocks within the chat request bubble.'), true);\n+\n+export const chatRequestBubbleBackground = registerColor('chat.requestBubbleBackground', { light: transparent(editorSelectionBackground, 0.3), dark: transparent(editorSelectionBackground, 0.3), hcDark: null, hcLight: null }, localize('chat.requestBubbleBackground', \"Background color of the chat request bubble.\"), true);\n",
      "author": "justschen",
      "repo": "microsoft/vscode",
      "labels": [],
      "expected_technical": null,
      "expected_marketing": null,
      "difficulty": "medium",
      "category": "general"
    },
    {
      "id": "pr_249589_vscode",
      "pr_number": 249589,
      "title": "Joycegu/add genai packages 05222025",
      "body": "Adding more genai-related packages, including:\r\n![image](https://github.com/user-attachments/assets/cab954fe-3c0e-4b0b-8d45-20186f7bad5c)\r\n",
      "diff": "diff --git a/src/vs/workbench/contrib/tags/electron-sandbox/workspaceTagsService.ts b/src/vs/workbench/contrib/tags/electron-sandbox/workspaceTagsService.ts\nindex ab86e967c4180..c3eddd4f43148 100644\n--- a/src/vs/workbench/contrib/tags/electron-sandbox/workspaceTagsService.ts\n+++ b/src/vs/workbench/contrib/tags/electron-sandbox/workspaceTagsService.ts\n@@ -60,6 +60,7 @@ const ModulesToLookFor = [\n \t'azure',\n \t'azure-storage',\n \t'chroma',\n+\t'deepseek-js',\n \t'faiss',\n \t'firebase',\n \t'@google-cloud/common',\n@@ -68,6 +69,7 @@ const ModulesToLookFor = [\n \t'milvus',\n \t'openai',\n \t'pinecone',\n+\t'praisonai',\n \t'qdrant',\n \t// Office and Sharepoint packages\n \t'@microsoft/teams-js',\n@@ -252,10 +254,12 @@ const PyMetaModulesToLookFor = [\n \n const PyModulesToLookFor = [\n \t'azure',\n+\t'azure-ai-agents',\n \t'azure-ai-inference',\n \t'azure-ai-language-conversations',\n \t'azure-ai-language-questionanswering',\n \t'azure-ai-ml',\n+\t'azure-ai-projects', // manage azure ai foundry projects\n \t'azure-ai-translation-document',\n \t'azure-appconfiguration',\n \t'azure-appconfiguration-provider',\n@@ -355,12 +359,21 @@ const PyModulesToLookFor = [\n \t'azure-translator',\n \t'azure-mgmt-hybridkubernetes',\n \t'azure-mgmt-kubernetesconfiguration',\n+\t'a2a-sdk',\n \t'adal',\n+\t'agents',\n \t'pydocumentdb',\n \t'botbuilder-core',\n \t'botbuilder-schema',\n \t'botframework-connector',\n+\t'codegen',\n+\t'deepseek',\n+\t'fabric-data-agent-sdk',\n+\t'google-adk',\n \t'playwright',\n+\t'praisonai',\n+\t'pydantic-ai',\n+\t'python-rai',\n \t'transformers',\n \t'langchain',\n \t'llama-index',\n@@ -369,6 +382,8 @@ const PyModulesToLookFor = [\n \t'openai',\n \t'semantic-kernel',\n \t'sentence-transformers',\n+\t'smolagents',\n+\t'stripe-agent-toolkit',\n \t// AI and vector db dev packages\n \t'anthropic',\n \t'aporia',\n",
      "author": "JoyceGu",
      "repo": "microsoft/vscode",
      "labels": [],
      "expected_technical": null,
      "expected_marketing": null,
      "difficulty": "easy",
      "category": "feature"
    },
    {
      "id": "pr_245024_vscode",
      "pr_number": 245024,
      "title": "Enhance GithHub publishing logic to handle renamed repositories",
      "body": "<!-- Thank you for submitting a Pull Request. Please:\r\n* Read our Pull Request guidelines:\r\n  https://github.com/microsoft/vscode/wiki/How-to-Contribute#pull-requests\r\n* Associate an issue with the Pull Request.\r\n* Ensure that the code is up-to-date with the `main` branch.\r\n* Include a description of the proposed changes and how to test them.\r\n-->\r\nFixes #245022.\r\n\r\n# Steps to test the fix\r\n\r\n1. Sign up for GitHub\r\n2. Create repository \"test\" on GitHub\r\n3. Rename that repository to \"test-renamed\"\r\n4. Login to your GitHub account from within vscode\r\n5. Initialize a new git repository in vscode and commit a test file\r\n6. Chose the \"Publish to GitHub\" command\r\n7. Use \"test\" as a repository name\r\n\r\nWith the current version, vscode will complain that the repository already exists, even though it no longer does.\r\nMy MR fixes this, publishing is now possible again.\r\n\r\n# Testing\r\n\r\nI don't thing it's feasible to write a unit test for this, as that would require a GitHub account and a repository which needs to be created and deleted on each test run.",
      "diff": "diff --git a/extensions/github/src/publish.ts b/extensions/github/src/publish.ts\nindex dee8898d34824..321063072a404 100644\n--- a/extensions/github/src/publish.ts\n+++ b/extensions/github/src/publish.ts\n@@ -99,8 +99,13 @@ export async function publishRepository(gitAPI: GitAPI, repository?: Repository)\n \t\tif (repo) {\n \t\t\ttry {\n \t\t\t\tquickpick.busy = true;\n-\t\t\t\tawait octokit.repos.get({ owner, repo: repo });\n-\t\t\t\tquickpick.items = [{ label: `$(error) GitHub repository already exists`, description: `$(github) ${owner}/${repo}`, alwaysShow: true }];\n+\t\t\t\tconst fullName = `${owner}/${repo}`;\n+\t\t\t\tconst result = await octokit.repos.get({ owner, repo: repo });\n+\t\t\t\tif (result.data.full_name.toLowerCase() !== fullName.toLowerCase()) {\n+\t\t\t\t\t// Repository has moved permanently due to it being renamed\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t\tquickpick.items = [{ label: `$(error) GitHub repository already exists`, description: `$(github) ${fullName}`, alwaysShow: true }];\n \t\t\t} catch {\n \t\t\t\tbreak;\n \t\t\t} finally {\n",
      "author": "nomike",
      "repo": "microsoft/vscode",
      "labels": [
        "github"
      ],
      "expected_technical": null,
      "expected_marketing": null,
      "difficulty": "easy",
      "category": "general"
    },
    {
      "id": "pr_249929_vscode",
      "pr_number": 249929,
      "title": "mcp: improve tool prefixing behavior",
      "body": "Closes https://github.com/microsoft/vscode/issues/249281\n\nUses `mcp_servername_toolname` to form the tool.\n\n<!-- Thank you for submitting a Pull Request. Please:\n* Read our Pull Request guidelines:\n  https://github.com/microsoft/vscode/wiki/How-to-Contribute#pull-requests\n* Associate an issue with the Pull Request.\n* Ensure that the code is up-to-date with the `main` branch.\n* Include a description of the proposed changes and how to test them.\n-->\n",
      "diff": "diff --git a/src/vs/workbench/contrib/mcp/common/mcpRegistry.ts b/src/vs/workbench/contrib/mcp/common/mcpRegistry.ts\nindex 9e905ae0d7551..c5a2d27403889 100644\n--- a/src/vs/workbench/contrib/mcp/common/mcpRegistry.ts\n+++ b/src/vs/workbench/contrib/mcp/common/mcpRegistry.ts\n@@ -5,13 +5,11 @@\n \n import { Codicon } from '../../../../base/common/codicons.js';\n import { Emitter } from '../../../../base/common/event.js';\n-import { StringSHA1 } from '../../../../base/common/hash.js';\n import { MarkdownString } from '../../../../base/common/htmlContent.js';\n import { Lazy } from '../../../../base/common/lazy.js';\n import { Disposable, IDisposable } from '../../../../base/common/lifecycle.js';\n import { derived, IObservable, observableValue } from '../../../../base/common/observable.js';\n import { basename } from '../../../../base/common/resources.js';\n-import { indexOfPattern } from '../../../../base/common/strings.js';\n import { localize } from '../../../../nls.js';\n import { ConfigurationTarget, IConfigurationService } from '../../../../platform/configuration/common/configuration.js';\n import { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';\n@@ -37,8 +35,6 @@ const createTrustMemento = observableMemento<Readonly<Record<string, boolean>>>(\n \tkey: 'mcp.trustedCollections'\n });\n \n-const collectionPrefixLen = 3;\n-\n export class McpRegistry extends Disposable implements IMcpRegistry {\n \tdeclare public readonly _serviceBrand: undefined;\n \n@@ -54,41 +50,6 @@ export class McpRegistry extends Disposable implements IMcpRegistry {\n \t\treturn this._collections.read(reader);\n \t});\n \n-\tprivate readonly _collectionToPrefixes = this._collections.map(c => {\n-\t\t// This creates tool prefixes based on a hash of the collection ID. This is\n-\t\t// a short prefix because tool names that are too long can cause errors (#243602).\n-\t\t// So we take a hash (in order for tools to be stable, because randomized\n-\t\t// names can cause hallicinations if present in history) and then adjust\n-\t\t// them if there are any collisions.\n-\t\ttype CollectionHash = { view: number; hash: string; collection: McpCollectionDefinition };\n-\n-\t\tconst hashes = c.map((collection): CollectionHash => {\n-\t\t\tconst sha = new StringSHA1();\n-\t\t\tsha.update(collection.id);\n-\t\t\tconst hash = sha.digest();\n-\t\t\t// Gemini errors if the name starts with a number (microsoft/vscode-copilot-release#7152)\n-\t\t\treturn { view: indexOfPattern(hash, /[a-z]/i), hash, collection };\n-\t\t});\n-\n-\t\tconst view = (h: CollectionHash) => h.hash.slice(h.view, h.view + collectionPrefixLen);\n-\n-\t\tlet collided = false;\n-\t\tdo {\n-\t\t\thashes.sort((a, b) => view(a).localeCompare(view(b)) || a.collection.id.localeCompare(b.collection.id));\n-\t\t\tcollided = false;\n-\t\t\tfor (let i = 1; i < hashes.length; i++) {\n-\t\t\t\tconst prev = hashes[i - 1];\n-\t\t\t\tconst curr = hashes[i];\n-\t\t\t\tif (view(prev) === view(curr) && curr.view + collectionPrefixLen < curr.hash.length) {\n-\t\t\t\t\tcurr.view++;\n-\t\t\t\t\tcollided = true;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} while (collided);\n-\n-\t\treturn Object.fromEntries(hashes.map(h => [h.collection.id, view(h) + '.']));\n-\t});\n-\n \tprivate readonly _workspaceStorage = new Lazy(() => this._register(this._instantiationService.createInstance(McpRegistryInputStorage, StorageScope.WORKSPACE, StorageTarget.USER)));\n \tprivate readonly _profileStorage = new Lazy(() => this._register(this._instantiationService.createInstance(McpRegistryInputStorage, StorageScope.PROFILE, StorageTarget.USER)));\n \n@@ -150,7 +111,8 @@ export class McpRegistry extends Disposable implements IMcpRegistry {\n \t\tif (toReplace) {\n \t\t\tthis._collections.set(currentCollections.map(c => c === toReplace ? collection : c), undefined);\n \t\t} else {\n-\t\t\tthis._collections.set([...currentCollections, collection], undefined);\n+\t\t\tthis._collections.set([...currentCollections, collection]\n+\t\t\t\t.sort((a, b) => (a.presentation?.order || 0) - (b.presentation?.order || 0)), undefined);\n \t\t}\n \n \t\treturn {\n@@ -169,10 +131,6 @@ export class McpRegistry extends Disposable implements IMcpRegistry {\n \t\t});\n \t}\n \n-\tpublic collectionToolPrefix(collection: McpCollectionReference): IObservable<string> {\n-\t\treturn this._collectionToPrefixes.map(p => p[collection.id] ?? '');\n-\t}\n-\n \tpublic async discoverCollections(): Promise<McpCollectionDefinition[]> {\n \t\tconst toDiscover = this._collections.get().filter(c => c.lazy && !c.lazy.isCached);\n \ndiff --git a/src/vs/workbench/contrib/mcp/common/mcpRegistryTypes.ts b/src/vs/workbench/contrib/mcp/common/mcpRegistryTypes.ts\nindex e8bea2e923f71..67ae6ff91278a 100644\n--- a/src/vs/workbench/contrib/mcp/common/mcpRegistryTypes.ts\n+++ b/src/vs/workbench/contrib/mcp/common/mcpRegistryTypes.ts\n@@ -55,9 +55,6 @@ export interface IMcpRegistry {\n \t/** Whether there are new collections that can be resolved with a discover() call */\n \treadonly lazyCollectionState: IObservable<LazyCollectionState>;\n \n-\t/** Gets the prefix that should be applied to a collection's tools in order to avoid ID conflicts */\n-\tcollectionToolPrefix(collection: McpCollectionReference): IObservable<string>;\n-\n \t/** Helper function to observe a definition by its reference. */\n \tgetServerDefinition(collectionRef: McpDefinitionReference, definitionRef: McpDefinitionReference): IObservable<{ server: McpServerDefinition | undefined; collection: McpCollectionDefinition | undefined }>;\n \ndiff --git a/src/vs/workbench/contrib/mcp/common/mcpServer.ts b/src/vs/workbench/contrib/mcp/common/mcpServer.ts\nindex b2b639784e3b4..07bf504d19f70 100644\n--- a/src/vs/workbench/contrib/mcp/common/mcpServer.ts\n+++ b/src/vs/workbench/contrib/mcp/common/mcpServer.ts\n@@ -29,7 +29,7 @@ import { mcpActivationEvent } from './mcpConfiguration.js';\n import { McpDevModeServerAttache } from './mcpDevMode.js';\n import { IMcpRegistry } from './mcpRegistryTypes.js';\n import { McpServerRequestHandler } from './mcpServerRequestHandler.js';\n-import { extensionMcpCollectionPrefix, IMcpPrompt, IMcpPromptMessage, IMcpResource, IMcpServer, IMcpServerConnection, IMcpServerStartOpts, IMcpTool, McpCollectionDefinition, McpCollectionReference, McpConnectionFailedError, McpConnectionState, McpDefinitionReference, McpResourceURI, McpServerDefinition, McpServerCacheState, McpServerTransportType, McpCapability, IMcpResourceTemplate } from './mcpTypes.js';\n+import { extensionMcpCollectionPrefix, IMcpPrompt, IMcpPromptMessage, IMcpResource, IMcpServer, IMcpServerConnection, IMcpServerStartOpts, IMcpTool, McpCollectionDefinition, McpCollectionReference, McpConnectionFailedError, McpConnectionState, McpDefinitionReference, McpResourceURI, McpServerDefinition, McpServerCacheState, McpServerTransportType, McpCapability, IMcpResourceTemplate, McpToolName } from './mcpTypes.js';\n import { MCP } from './modelContextProtocol.js';\n import { UriTemplate } from './uriTemplate.js';\n \n@@ -266,7 +266,7 @@ export class McpServer extends Disposable implements IMcpServer {\n \n \t\tconst fromServer = this._tools.fromServerPromise.read(reader);\n \t\tconst connectionState = this.connectionState.read(reader);\n-\t\tconst isIdle = McpConnectionState.canBeStarted(connectionState.state) && !fromServer;\n+\t\tconst isIdle = McpConnectionState.canBeStarted(connectionState.state) || !fromServer;\n \t\tif (isIdle) {\n \t\t\treturn stateWhenServingFromCache();\n \t\t}\n@@ -297,6 +297,7 @@ export class McpServer extends Disposable implements IMcpServer {\n \t\texplicitRoots: URI[] | undefined,\n \t\tprivate readonly _requiresExtensionActivation: boolean | undefined,\n \t\tprivate readonly _primitiveCache: McpServerMetadataCache,\n+\t\ttoolPrefix: string,\n \t\t@IMcpRegistry private readonly _mcpRegistry: IMcpRegistry,\n \t\t@IWorkspaceContextService workspacesService: IWorkspaceContextService,\n \t\t@IExtensionService private readonly _extensionService: IExtensionService,\n@@ -354,15 +355,11 @@ export class McpServer extends Disposable implements IMcpServer {\n \t\t}));\n \n \t\t// 3. Publish tools\n-\t\tconst toolPrefix = this._mcpRegistry.collectionToolPrefix(this.collection);\n \t\tthis._tools = new CachedPrimitive<IMcpTool, IValidatedMcpTool>(\n \t\t\tthis.definition.id,\n \t\t\tthis._primitiveCache,\n \t\t\t(entry) => entry.tools,\n-\t\t\t(entry, reader) => {\n-\t\t\t\tconst prefix = toolPrefix.read(reader);\n-\t\t\t\treturn entry.map(def => new McpTool(this, prefix, def)).sort((a, b) => a.compare(b));\n-\t\t\t},\n+\t\t\t(entry) => entry.map(def => new McpTool(this, toolPrefix, def)).sort((a, b) => a.compare(b)),\n \t\t);\n \n \t\t// 4. Publish promtps\n@@ -708,7 +705,7 @@ export class McpTool implements IMcpTool {\n \t\tidPrefix: string,\n \t\tprivate readonly _definition: IValidatedMcpTool,\n \t) {\n-\t\tthis.id = (idPrefix + _definition.name).replaceAll('.', '_');\n+\t\tthis.id = (idPrefix + _definition.name).replaceAll('.', '_').slice(0, McpToolName.MaxLength);\n \t}\n \n \tcall(params: Record<string, unknown>, token?: CancellationToken): Promise<MCP.CallToolResult> {\ndiff --git a/src/vs/workbench/contrib/mcp/common/mcpService.ts b/src/vs/workbench/contrib/mcp/common/mcpService.ts\nindex ecba6bcfd2e16..94bd083b8a28a 100644\n--- a/src/vs/workbench/contrib/mcp/common/mcpService.ts\n+++ b/src/vs/workbench/contrib/mcp/common/mcpService.ts\n@@ -20,14 +20,14 @@ import { CountTokensCallback, ILanguageModelToolsService, IPreparedToolInvocatio\n import { McpCommandIds } from './mcpCommandIds.js';\n import { IMcpRegistry } from './mcpRegistryTypes.js';\n import { McpServer, McpServerMetadataCache } from './mcpServer.js';\n-import { IMcpServer, IMcpService, IMcpTool, McpCollectionDefinition, McpServerCacheState, McpServerDefinition } from './mcpTypes.js';\n+import { IMcpServer, IMcpService, IMcpTool, McpCollectionDefinition, McpServerCacheState, McpServerDefinition, McpToolName } from './mcpTypes.js';\n \n interface ISyncedToolData {\n \ttoolData: IToolData;\n \tstore: DisposableStore;\n }\n \n-type IMcpServerRec = IReference<IMcpServer>;\n+type IMcpServerRec = IReference<IMcpServer> & { toolPrefix: string };\n \n export class McpService extends Disposable implements IMcpService {\n \n@@ -94,6 +94,15 @@ export class McpService extends Disposable implements IMcpService {\n \n \t\tstore.add(autorun(reader => {\n \t\t\tconst toDelete = new Set(tools.keys());\n+\n+\t\t\t// toRegister is deferred until deleting tools that moving a tool between\n+\t\t\t// servers (or deleting one instance of a multi-instance server) doesn't cause an error.\n+\t\t\tconst toRegister: (() => void)[] = [];\n+\t\t\tconst registerTool = (tool: IMcpTool, toolData: IToolData, store: DisposableStore) => {\n+\t\t\t\tstore.add(this._toolsService.registerToolData(toolData));\n+\t\t\t\tstore.add(this._toolsService.registerToolImplementation(tool.id, this._instantiationService.createInstance(McpToolImplementation, tool, server)));\n+\t\t\t};\n+\n \t\t\tfor (const tool of server.tools.read(reader)) {\n \t\t\t\tconst existing = tools.get(tool.id);\n \t\t\t\tconst collection = this._mcpRegistry.collections.get().find(c => c.id === server.collection.id);\n@@ -102,7 +111,7 @@ export class McpService extends Disposable implements IMcpService {\n \t\t\t\t\tsource: { type: 'mcp', label: server.definition.label, collectionId: server.collection.id, definitionId: server.definition.id },\n \t\t\t\t\ticon: Codicon.tools,\n \t\t\t\t\tdisplayName: tool.definition.annotations?.title || tool.definition.name,\n-\t\t\t\t\ttoolReferenceName: tool.definition.name,\n+\t\t\t\t\ttoolReferenceName: tool.id,\n \t\t\t\t\tmodelDescription: tool.definition.description ?? '',\n \t\t\t\t\tuserDescription: tool.definition.description ?? '',\n \t\t\t\t\tinputSchema: tool.definition.inputSchema,\n@@ -112,26 +121,20 @@ export class McpService extends Disposable implements IMcpService {\n \t\t\t\t\ttags: ['mcp'],\n \t\t\t\t};\n \n-\t\t\t\tconst registerTool = (store: DisposableStore) => {\n-\t\t\t\t\tstore.add(this._toolsService.registerToolData(toolData));\n-\t\t\t\t\tstore.add(this._toolsService.registerToolImplementation(tool.id, this._instantiationService.createInstance(McpToolImplementation, tool, server)));\n-\t\t\t\t};\n-\n \t\t\t\tif (existing) {\n \t\t\t\t\tif (!equals(existing.toolData, toolData)) {\n \t\t\t\t\t\texisting.toolData = toolData;\n \t\t\t\t\t\texisting.store.clear();\n \t\t\t\t\t\t// We need to re-register both the data and implementation, as the\n \t\t\t\t\t\t// implementation is discarded when the data is removed (#245921)\n-\t\t\t\t\t\tregisterTool(store);\n+\t\t\t\t\t\tregisterTool(tool, toolData, store);\n \t\t\t\t\t}\n \t\t\t\t\ttoDelete.delete(tool.id);\n \t\t\t\t} else {\n \t\t\t\t\tconst store = new DisposableStore();\n-\t\t\t\t\tregisterTool(store);\n+\t\t\t\t\ttoRegister.push(() => registerTool(tool, toolData, store));\n \t\t\t\t\ttools.set(tool.id, { toolData, store });\n \t\t\t\t}\n-\n \t\t\t}\n \n \t\t\tfor (const id of toDelete) {\n@@ -141,6 +144,10 @@ export class McpService extends Disposable implements IMcpService {\n \t\t\t\t\ttools.delete(id);\n \t\t\t\t}\n \t\t\t}\n+\n+\t\t\tfor (const fn of toRegister) {\n+\t\t\t\tfn();\n+\t\t\t}\n \t\t}));\n \n \t\tstore.add(toDisposable(() => {\n@@ -151,11 +158,12 @@ export class McpService extends Disposable implements IMcpService {\n \t}\n \n \tpublic updateCollectedServers() {\n+\t\tconst prefixGenerator = new McpPrefixGenerator();\n \t\tconst definitions = this._mcpRegistry.collections.get().flatMap(collectionDefinition =>\n-\t\t\tcollectionDefinition.serverDefinitions.get().map(serverDefinition => ({\n-\t\t\t\tserverDefinition,\n-\t\t\t\tcollectionDefinition,\n-\t\t\t}))\n+\t\t\tcollectionDefinition.serverDefinitions.get().map(serverDefinition => {\n+\t\t\t\tconst toolPrefix = prefixGenerator.generate(serverDefinition.label);\n+\t\t\t\treturn { serverDefinition, collectionDefinition, toolPrefix };\n+\t\t\t})\n \t\t);\n \n \t\tconst nextDefinitions = new Set(definitions);\n@@ -174,7 +182,7 @@ export class McpService extends Disposable implements IMcpService {\n \n \t\t// Transfer over any servers that are still valid.\n \t\tfor (const server of currentServers) {\n-\t\t\tconst match = definitions.find(d => defsEqual(server.object, d));\n+\t\t\tconst match = definitions.find(d => defsEqual(server.object, d) && server.toolPrefix === d.toolPrefix);\n \t\t\tif (match) {\n \t\t\t\tpushMatch(match, server);\n \t\t\t} else {\n@@ -192,12 +200,13 @@ export class McpService extends Disposable implements IMcpService {\n \t\t\t\tdef.serverDefinition.roots,\n \t\t\t\t!!def.collectionDefinition.lazy,\n \t\t\t\tdef.collectionDefinition.scope === StorageScope.WORKSPACE ? this.workspaceCache : this.userCache,\n+\t\t\t\tdef.toolPrefix,\n \t\t\t);\n \n \t\t\tstore.add(object);\n \t\t\tthis._syncTools(object, store);\n \n-\t\t\tnextServers.push({ object, dispose: () => store.dispose() });\n+\t\t\tnextServers.push({ object, dispose: () => store.dispose(), toolPrefix: def.toolPrefix });\n \t\t}\n \n \t\ttransaction(tx => {\n@@ -292,3 +301,18 @@ class McpToolImplementation implements IToolImpl {\n \t\treturn result;\n \t}\n }\n+\n+// Helper class for generating unique MCP tool prefixes\n+class McpPrefixGenerator {\n+\tprivate readonly seenPrefixes = new Set<string>();\n+\n+\tgenerate(label: string): string {\n+\t\tconst baseToolPrefix = McpToolName.Prefix + label.toLowerCase().replace(/[^a-z0-9_.-]+/g, '_').slice(0, McpToolName.MaxPrefixLen - McpToolName.Prefix.length - 1);\n+\t\tlet toolPrefix = baseToolPrefix + '_';\n+\t\tfor (let i = 2; this.seenPrefixes.has(toolPrefix); i++) {\n+\t\t\ttoolPrefix = baseToolPrefix + i + '_';\n+\t\t}\n+\t\tthis.seenPrefixes.add(toolPrefix);\n+\t\treturn toolPrefix;\n+\t}\n+}\ndiff --git a/src/vs/workbench/contrib/mcp/common/mcpTypes.ts b/src/vs/workbench/contrib/mcp/common/mcpTypes.ts\nindex 95d82c2dda5fc..08c7fb561ae15 100644\n--- a/src/vs/workbench/contrib/mcp/common/mcpTypes.ts\n+++ b/src/vs/workbench/contrib/mcp/common/mcpTypes.ts\n@@ -639,3 +639,9 @@ export const enum McpCapability {\n \tTools = 1 << 7,\n \tToolsListChanged = 1 << 8,\n }\n+\n+export const enum McpToolName {\n+\tPrefix = 'mcp_',\n+\tMaxPrefixLen = 18,\n+\tMaxLength = 64,\n+}\ndiff --git a/src/vs/workbench/contrib/mcp/test/common/mcpRegistry.test.ts b/src/vs/workbench/contrib/mcp/test/common/mcpRegistry.test.ts\nindex 0cdbb72516361..621505bbe912d 100644\n--- a/src/vs/workbench/contrib/mcp/test/common/mcpRegistry.test.ts\n+++ b/src/vs/workbench/contrib/mcp/test/common/mcpRegistry.test.ts\n@@ -11,6 +11,7 @@ import { upcast } from '../../../../../base/common/types.js';\n import { URI } from '../../../../../base/common/uri.js';\n import { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../../base/test/common/utils.js';\n import { ConfigurationTarget, IConfigurationService } from '../../../../../platform/configuration/common/configuration.js';\n+import { TestConfigurationService } from '../../../../../platform/configuration/test/common/testConfigurationService.js';\n import { IDialogService } from '../../../../../platform/dialogs/common/dialogs.js';\n import { ServiceCollection } from '../../../../../platform/instantiation/common/serviceCollection.js';\n import { TestInstantiationService } from '../../../../../platform/instantiation/test/common/instantiationServiceMock.js';\n@@ -20,16 +21,15 @@ import { ISecretStorageService } from '../../../../../platform/secrets/common/se\n import { TestSecretStorageService } from '../../../../../platform/secrets/test/common/testSecretStorageService.js';\n import { IStorageService, StorageScope } from '../../../../../platform/storage/common/storage.js';\n import { IConfigurationResolverService } from '../../../../services/configurationResolver/common/configurationResolver.js';\n+import { ConfigurationResolverExpression } from '../../../../services/configurationResolver/common/configurationResolverExpression.js';\n import { IOutputService } from '../../../../services/output/common/output.js';\n import { TestLoggerService, TestStorageService } from '../../../../test/common/workbenchTestServices.js';\n+import { mcpEnabledSection } from '../../common/mcpConfiguration.js';\n import { McpRegistry } from '../../common/mcpRegistry.js';\n import { IMcpHostDelegate, IMcpMessageTransport } from '../../common/mcpRegistryTypes.js';\n import { McpServerConnection } from '../../common/mcpServerConnection.js';\n-import { LazyCollectionState, McpCollectionDefinition, McpCollectionReference, McpServerDefinition, McpServerTransportStdio, McpServerTransportType } from '../../common/mcpTypes.js';\n+import { LazyCollectionState, McpCollectionDefinition, McpServerDefinition, McpServerTransportStdio, McpServerTransportType } from '../../common/mcpTypes.js';\n import { TestMcpMessageTransport } from './mcpRegistryTypes.js';\n-import { ConfigurationResolverExpression } from '../../../../services/configurationResolver/common/configurationResolverExpression.js';\n-import { TestConfigurationService } from '../../../../../platform/configuration/test/common/testConfigurationService.js';\n-import { mcpEnabledSection } from '../../common/mcpConfiguration.js';\n \n class TestConfigurationResolverService implements Partial<IConfigurationResolverService> {\n \tdeclare readonly _serviceBrand: undefined;\n@@ -528,117 +528,4 @@ suite('Workbench - MCP - Registry', () => {\n \t\t\tassert.strictEqual(registry.lazyCollectionState.get(), LazyCollectionState.HasUnknown);\n \t\t});\n \t});\n-\n-\tsuite('Collection Tool Prefixes', () => {\n-\t\ttest('assigns unique prefixes to collections', () => {\n-\t\t\tconst collection1: McpCollectionDefinition = {\n-\t\t\t\tid: 'collection1',\n-\t\t\t\tlabel: 'Collection 1',\n-\t\t\t\tremoteAuthority: null,\n-\t\t\t\tserverDefinitions: observableValue('serverDefs', []),\n-\t\t\t\tisTrustedByDefault: true,\n-\t\t\t\tscope: StorageScope.APPLICATION\n-\t\t\t};\n-\n-\t\t\tconst collection2: McpCollectionDefinition = {\n-\t\t\t\tid: 'collection2',\n-\t\t\t\tlabel: 'Collection 2',\n-\t\t\t\tremoteAuthority: null,\n-\t\t\t\tserverDefinitions: observableValue('serverDefs', []),\n-\t\t\t\tisTrustedByDefault: true,\n-\t\t\t\tscope: StorageScope.APPLICATION\n-\t\t\t};\n-\n-\t\t\tstore.add(registry.registerCollection(collection1));\n-\t\t\tstore.add(registry.registerCollection(collection2));\n-\n-\t\t\tconst prefix1 = registry.collectionToolPrefix(collection1).get();\n-\t\t\tconst prefix2 = registry.collectionToolPrefix(collection2).get();\n-\n-\t\t\tassert.notStrictEqual(prefix1, prefix2);\n-\t\t\tassert.ok(/^[a-f0-9]{3}\\.$/.test(prefix1));\n-\t\t\tassert.ok(/^[a-f0-9]{3}\\.$/.test(prefix2));\n-\t\t});\n-\n-\t\ttest('handles hash collisions by incrementing view', () => {\n-\t\t\t// These strings are known to have SHA1 hash collisions in their first 3 characters\n-\t\t\tconst collection1: McpCollectionDefinition = {\n-\t\t\t\tid: 'potato',\n-\t\t\t\tlabel: 'Collection 1',\n-\t\t\t\tremoteAuthority: null,\n-\t\t\t\tserverDefinitions: observableValue('serverDefs', []),\n-\t\t\t\tisTrustedByDefault: true,\n-\t\t\t\tscope: StorageScope.APPLICATION\n-\t\t\t};\n-\n-\t\t\tconst collection2: McpCollectionDefinition = {\n-\t\t\t\tid: 'candidate_83048',\n-\t\t\t\tlabel: 'Collection 2',\n-\t\t\t\tremoteAuthority: null,\n-\t\t\t\tserverDefinitions: observableValue('serverDefs', []),\n-\t\t\t\tisTrustedByDefault: true,\n-\t\t\t\tscope: StorageScope.APPLICATION\n-\t\t\t};\n-\n-\t\t\tstore.add(registry.registerCollection(collection1));\n-\t\t\tstore.add(registry.registerCollection(collection2));\n-\n-\t\t\tconst prefix1 = registry.collectionToolPrefix(collection1).get();\n-\t\t\tconst prefix2 = registry.collectionToolPrefix(collection2).get();\n-\n-\t\t\tassert.notStrictEqual(prefix1, prefix2);\n-\t\t\tassert.ok(/^[a-f0-9]{3}\\.$/.test(prefix1));\n-\t\t\tassert.ok(/^[a-f0-9]{3}\\.$/.test(prefix2));\n-\t\t});\n-\n-\t\ttest('prefix changes when collections change', () => {\n-\t\t\tconst collection1: McpCollectionDefinition = {\n-\t\t\t\tid: 'collection1',\n-\t\t\t\tlabel: 'Collection 1',\n-\t\t\t\tremoteAuthority: null,\n-\t\t\t\tserverDefinitions: observableValue('serverDefs', []),\n-\t\t\t\tisTrustedByDefault: true,\n-\t\t\t\tscope: StorageScope.APPLICATION\n-\t\t\t};\n-\n-\t\t\tconst disposable = registry.registerCollection(collection1);\n-\t\t\tstore.add(disposable);\n-\n-\t\t\tconst prefix1 = registry.collectionToolPrefix(collection1).get();\n-\t\t\tassert.ok(!!prefix1);\n-\n-\t\t\tdisposable.dispose();\n-\n-\t\t\tconst prefix2 = registry.collectionToolPrefix(collection1).get();\n-\n-\t\t\tassert.strictEqual(prefix2, '');\n-\t\t});\n-\n-\t\ttest('prefix does not start with a number', () => {\n-\t\t\tconst collection: McpCollectionDefinition = {\n-\t\t\t\tid: 'foo',\n-\t\t\t\tlabel: 'Collection 1',\n-\t\t\t\tremoteAuthority: null,\n-\t\t\t\tserverDefinitions: observableValue('serverDefs', []),\n-\t\t\t\tisTrustedByDefault: true,\n-\t\t\t\tscope: StorageScope.APPLICATION\n-\t\t\t};\n-\n-\t\t\tconst disposable = registry.registerCollection(collection);\n-\t\t\tstore.add(disposable);\n-\n-\t\t\tconst prefix1 = registry.collectionToolPrefix(collection).get();\n-\t\t\tassert.strictEqual(prefix1, 'bee.'); // normally 0beec7b5ea3f0fdbc95d0dd47f3c5bc275da8a33\n-\t\t});\n-\n-\t\ttest('prefix is empty for unknown collections', () => {\n-\t\t\tconst unknownCollection: McpCollectionReference = {\n-\t\t\t\tid: 'unknown',\n-\t\t\t\tlabel: 'Unknown'\n-\t\t\t};\n-\n-\t\t\tconst prefix = registry.collectionToolPrefix(unknownCollection).get();\n-\t\t\tassert.strictEqual(prefix, '');\n-\t\t});\n-\t});\n });\n",
      "author": "connor4312",
      "repo": "microsoft/vscode",
      "labels": [],
      "expected_technical": null,
      "expected_marketing": null,
      "difficulty": "medium",
      "category": "bugfix"
    },
    {
      "id": "pr_249923_vscode",
      "pr_number": 249923,
      "title": "better handling of editor width in request bubbles",
      "body": "<!-- Thank you for submitting a Pull Request. Please:\r\n* Read our Pull Request guidelines:\r\n  https://github.com/microsoft/vscode/wiki/How-to-Contribute#pull-requests\r\n* Associate an issue with the Pull Request.\r\n* Ensure that the code is up-to-date with the `main` branch.\r\n* Include a description of the proposed changes and how to test them.\r\n-->\r\n\r\n![192-Sunflora](https://github.com/user-attachments/assets/a31ca739-2981-4d65-894e-6fa506254282)\r\n\r\n",
      "diff": "diff --git a/src/vs/workbench/contrib/chat/browser/chatContentParts/chatMarkdownContentPart.ts b/src/vs/workbench/contrib/chat/browser/chatContentParts/chatMarkdownContentPart.ts\nindex 295e2a0223a30..b099a7e5f83ec 100644\n--- a/src/vs/workbench/contrib/chat/browser/chatContentParts/chatMarkdownContentPart.ts\n+++ b/src/vs/workbench/contrib/chat/browser/chatContentParts/chatMarkdownContentPart.ts\n@@ -248,10 +248,10 @@ export class ChatMarkdownContentPart extends Disposable implements IChatContentP\n \t\t\t|| this.codeblocks.at(-1)?.isStreaming && this.codeblocks.at(-1)?.codemapperUri !== undefined && other.content.value.lastIndexOf('```') === this.markdown.content.value.lastIndexOf('```'));\n \t}\n \n-\tlayout(width: number): void {\n+\tlayout(width: number, isRequest: boolean): void {\n \t\tthis.allRefs.forEach((ref, index) => {\n \t\t\tif (ref.object instanceof CodeBlockPart) {\n-\t\t\t\tref.object.layout(width);\n+\t\t\t\tref.object.layout(width, isRequest);\n \t\t\t} else if (ref.object instanceof CollapsedCodeBlock) {\n \t\t\t\tconst codeblockModel = this.codeblocks[index];\n \t\t\t\tif (codeblockModel.codemapperUri && ref.object.uri?.toString() !== codeblockModel.codemapperUri.toString()) {\ndiff --git a/src/vs/workbench/contrib/chat/browser/chatListRenderer.ts b/src/vs/workbench/contrib/chat/browser/chatListRenderer.ts\nindex 4bf88aefc120c..351434fdd2f3f 100644\n--- a/src/vs/workbench/contrib/chat/browser/chatListRenderer.ts\n+++ b/src/vs/workbench/contrib/chat/browser/chatListRenderer.ts\n@@ -1131,7 +1131,7 @@ export class ChatListItemRenderer extends Disposable implements ITreeRenderer<Ch\n \t\tconst codeBlockStartIndex = this.getCodeBlockStartIndex(context);\n \t\tconst markdownPart = templateData.instantiationService.createInstance(ChatMarkdownContentPart, markdown, context, this._editorPool, fillInIncompleteTokens, codeBlockStartIndex, this.renderer, this._currentLayoutWidth, this.codeBlockModelCollection, {});\n \t\tmarkdownPart.addDisposable(markdownPart.onDidChangeHeight(() => {\n-\t\t\tmarkdownPart.layout(this._currentLayoutWidth);\n+\t\t\tmarkdownPart.layout(this._currentLayoutWidth, isRequestVM(element));\n \t\t\tthis.updateItemHeight(templateData);\n \t\t}));\n \ndiff --git a/src/vs/workbench/contrib/chat/browser/codeBlockPart.css b/src/vs/workbench/contrib/chat/browser/codeBlockPart.css\nindex 0390217697bef..c088f93178d7e 100644\n--- a/src/vs/workbench/contrib/chat/browser/codeBlockPart.css\n+++ b/src/vs/workbench/contrib/chat/browser/codeBlockPart.css\n@@ -172,8 +172,3 @@\n .interactive-result-code-block.compare.no-diff .interactive-result-editor {\n \tdisplay: none;\n }\n-\n-.interactive-session .interactive-request .value .interactive-result-code-block .monaco-editor .overflow-guard,\n-.interactive-session .interactive-request .value .monaco-editor {\n-\twidth: 100% !important;\n-}\ndiff --git a/src/vs/workbench/contrib/chat/browser/codeBlockPart.ts b/src/vs/workbench/contrib/chat/browser/codeBlockPart.ts\nindex d7712820cd179..cac876dbfaec1 100644\n--- a/src/vs/workbench/contrib/chat/browser/codeBlockPart.ts\n+++ b/src/vs/workbench/contrib/chat/browser/codeBlockPart.ts\n@@ -64,7 +64,7 @@ import { getSimpleEditorOptions } from '../../codeEditor/browser/simpleEditorOpt\n import { IMarkdownVulnerability } from '../common/annotations.js';\n import { ChatContextKeys } from '../common/chatContextKeys.js';\n import { IChatResponseModel, IChatTextEditGroup } from '../common/chatModel.js';\n-import { IChatResponseViewModel, isResponseVM } from '../common/chatViewModel.js';\n+import { IChatResponseViewModel, isRequestVM, isResponseVM } from '../common/chatViewModel.js';\n import { ChatTreeItem } from './chat.js';\n import { IChatRendererDelegate } from './chatListRenderer.js';\n import { ChatEditorOptions } from './chatOptions.js';\n@@ -370,7 +370,7 @@ export class CodeBlockPart extends Disposable {\n \t\t};\n \t}\n \n-\tlayout(width: number): void {\n+\tlayout(width: number, isRequest?: boolean): void {\n \t\tconst contentHeight = this.getContentHeight();\n \n \t\tlet height = contentHeight;\n@@ -380,7 +380,7 @@ export class CodeBlockPart extends Disposable {\n \n \t\tconst editorBorder = 2;\n \t\twidth = width - editorBorder - (this.currentCodeBlockData?.renderOptions?.reserveWidth ?? 0);\n-\t\tthis.editor.layout({ width, height });\n+\t\tthis.editor.layout({ width: isRequest ? width * 0.9 : width, height });\n \t\tthis.updatePaddingForLayout();\n \t}\n \n@@ -402,7 +402,7 @@ export class CodeBlockPart extends Disposable {\n \t\tif (this.getEditorOptionsFromConfig().wordWrap === 'on') {\n \t\t\t// Initialize the editor with the new proper width so that getContentHeight\n \t\t\t// will be computed correctly in the next call to layout()\n-\t\t\tthis.layout(width);\n+\t\t\tthis.layout(width, isRequestVM(data.element));\n \t\t}\n \n \t\tawait this.updateEditor(data);\n@@ -419,7 +419,7 @@ export class CodeBlockPart extends Disposable {\n \t\t\t\tariaLabel: localize('chat.codeBlockLabel', \"Code block {0}\", data.codeBlockIndex + 1),\n \t\t\t});\n \t\t}\n-\t\tthis.layout(width);\n+\t\tthis.layout(width, isRequestVM(data.element));\n \t\tthis.toolbar.setAriaLabel(localize('chat.codeBlockToolbarLabel', \"Code block {0}\", data.codeBlockIndex + 1));\n \t\tif (data.renderOptions?.hideToolbar) {\n \t\t\tdom.hide(this.toolbar.getElement());\n",
      "author": "justschen",
      "repo": "microsoft/vscode",
      "labels": [],
      "expected_technical": null,
      "expected_marketing": null,
      "difficulty": "medium",
      "category": "general"
    },
    {
      "id": "pr_249920_vscode",
      "pr_number": 249920,
      "title": "Git - `provideOriginalResource()` should handle symbolic links",
      "body": "Related #249607",
      "diff": "diff --git a/extensions/git/src/repository.ts b/extensions/git/src/repository.ts\nindex 2a0ea63cb6474..670e667c9f954 100644\n--- a/extensions/git/src/repository.ts\n+++ b/extensions/git/src/repository.ts\n@@ -7,7 +7,7 @@ import TelemetryReporter from '@vscode/extension-telemetry';\n import * as fs from 'fs';\n import * as path from 'path';\n import picomatch from 'picomatch';\n-import { CancellationError, CancellationToken, CancellationTokenSource, Command, commands, Disposable, Event, EventEmitter, FileDecoration, l10n, LogLevel, LogOutputChannel, Memento, ProgressLocation, ProgressOptions, QuickDiffProvider, RelativePattern, scm, SourceControl, SourceControlInputBox, SourceControlInputBoxValidation, SourceControlInputBoxValidationType, SourceControlResourceDecorations, SourceControlResourceGroup, SourceControlResourceState, TabInputNotebookDiff, TabInputTextDiff, TabInputTextMultiDiff, ThemeColor, Uri, window, workspace, WorkspaceEdit } from 'vscode';\n+import { CancellationError, CancellationToken, CancellationTokenSource, Command, commands, Disposable, Event, EventEmitter, FileDecoration, FileType, l10n, LogLevel, LogOutputChannel, Memento, ProgressLocation, ProgressOptions, QuickDiffProvider, RelativePattern, scm, SourceControl, SourceControlInputBox, SourceControlInputBoxValidation, SourceControlInputBoxValidationType, SourceControlResourceDecorations, SourceControlResourceGroup, SourceControlResourceState, TabInputNotebookDiff, TabInputTextDiff, TabInputTextMultiDiff, ThemeColor, Uri, window, workspace, WorkspaceEdit } from 'vscode';\n import { ActionButton } from './actionButton';\n import { ApiRepository } from './api/api1';\n import { Branch, BranchQuery, Change, CommitOptions, FetchOptions, ForcePushMode, GitErrorCodes, LogOptions, Ref, RefType, Remote, Status } from './api/git';\n@@ -1024,11 +1024,19 @@ export class Repository implements Disposable {\n \t\treturn l10n.t('Git Local Changes (Working Tree)');\n \t}\n \n-\tprovideOriginalResource(uri: Uri): Uri | undefined {\n+\tasync provideOriginalResource(uri: Uri): Promise<Uri | undefined> {\n \t\tthis.logger.trace(`[Repository][provideOriginalResource] Resource: ${uri.toString()}`);\n \n \t\tif (uri.scheme !== 'file') {\n-\t\t\treturn;\n+\t\t\tthis.logger.trace(`[Repository][provideOriginalResource] Resource is not a file: ${uri.scheme}`);\n+\t\t\treturn undefined;\n+\t\t}\n+\n+\t\t// Ignore symbolic links\n+\t\tconst stat = await workspace.fs.stat(uri);\n+\t\tif ((stat.type & FileType.SymbolicLink) !== 0) {\n+\t\t\tthis.logger.trace(`[Repository][provideOriginalResource] Resource is a symbolic link: ${uri.toString()}`);\n+\t\t\treturn undefined;\n \t\t}\n \n \t\t// Ignore path that is not inside the current repository\n@@ -2836,9 +2844,21 @@ export class StagedResourceQuickDiffProvider implements QuickDiffProvider {\n \t\tprivate readonly logger: LogOutputChannel\n \t) { }\n \n-\tprovideOriginalResource(uri: Uri): Uri | undefined {\n+\tasync provideOriginalResource(uri: Uri): Promise<Uri | undefined> {\n \t\tthis.logger.trace(`[StagedResourceQuickDiffProvider][provideOriginalResource] Resource: ${uri.toString()}`);\n \n+\t\tif (uri.scheme !== 'file') {\n+\t\t\tthis.logger.trace(`[StagedResourceQuickDiffProvider][provideOriginalResource] Resource is not a file: ${uri.scheme}`);\n+\t\t\treturn undefined;\n+\t\t}\n+\n+\t\t// Ignore symbolic links\n+\t\tconst stat = await workspace.fs.stat(uri);\n+\t\tif ((stat.type & FileType.SymbolicLink) !== 0) {\n+\t\t\tthis.logger.trace(`[StagedResourceQuickDiffProvider][provideOriginalResource] Resource is a symbolic link: ${uri.toString()}`);\n+\t\t\treturn undefined;\n+\t\t}\n+\n \t\t// Ignore resources that are not in the index group\n \t\tif (!this._repository.indexGroup.resourceStates.some(r => pathEquals(r.resourceUri.fsPath, uri.fsPath))) {\n \t\t\tthis.logger.trace(`[StagedResourceQuickDiffProvider][provideOriginalResource] Resource is not part of a index group: ${uri.toString()}`);\n",
      "author": "lszomoru",
      "repo": "microsoft/vscode",
      "labels": [
        "git"
      ],
      "expected_technical": null,
      "expected_marketing": null,
      "difficulty": "easy",
      "category": "general"
    },
    {
      "id": "pr_249918_vscode",
      "pr_number": 249918,
      "title": "remove headers from user request",
      "body": "<!-- Thank you for submitting a Pull Request. Please:\r\n* Read our Pull Request guidelines:\r\n  https://github.com/microsoft/vscode/wiki/How-to-Contribute#pull-requests\r\n* Associate an issue with the Pull Request.\r\n* Ensure that the code is up-to-date with the `main` branch.\r\n* Include a description of the proposed changes and how to test them.\r\n-->\r\n<img width=\"630\" alt=\"Screenshot 2025-05-27 at 10 51 28\u202fAM\" src=\"https://github.com/user-attachments/assets/25b13f3e-05c5-467f-8546-344d01cfbf18\" />\r\n",
      "diff": "diff --git a/src/vs/workbench/contrib/chat/browser/chatListRenderer.ts b/src/vs/workbench/contrib/chat/browser/chatListRenderer.ts\nindex 7e862076353d2..4bf88aefc120c 100644\n--- a/src/vs/workbench/contrib/chat/browser/chatListRenderer.ts\n+++ b/src/vs/workbench/contrib/chat/browser/chatListRenderer.ts\n@@ -440,8 +440,8 @@ export class ChatListItemRenderer extends Disposable implements ITreeRenderer<Ch\n \t\t}\n \n \t\t// TODO: @justschen decide if we want to hide the header for requests or not\n-\t\t// const shouldShowHeader = isResponseVM(element) && !this.rendererOptions.noHeader;\n-\t\t// templateData.header?.classList.toggle('hidden', !shouldShowHeader);\n+\t\tconst shouldShowHeader = isResponseVM(element) && !this.rendererOptions.noHeader;\n+\t\ttemplateData.header?.classList.toggle('hidden', !shouldShowHeader);\n \n \t\t// Do a progressive render if\n \t\t// - This the last response in the list\n",
      "author": "justschen",
      "repo": "microsoft/vscode",
      "labels": [],
      "expected_technical": null,
      "expected_marketing": null,
      "difficulty": "easy",
      "category": "general"
    },
    {
      "id": "pr_249914_vscode",
      "pr_number": 249914,
      "title": "mcp: add a second-step fallback for legacy SSE",
      "body": "Refs https://github.com/microsoft/vscode/issues/246753#issuecomment-2913275158 / https://github.com/antfu/nuxt-mcp/issues/21\n\nThis server implementation was legacy SSE but (incorrectly) returned a\n2xx from a POST request. This PR adds a second attempt at falling back\nto SSE to solve this. Streamable HTTP should never emit an 'endpoint'\nevent, so if we see this then we will now also trigger a fallback.\n\nThis is less correct than the normal fallback route for a well-behaving\nserver (messages could get lost or reordered) but in the current\ninitialization behavior this works alright.\n\n<!-- Thank you for submitting a Pull Request. Please:\n* Read our Pull Request guidelines:\n  https://github.com/microsoft/vscode/wiki/How-to-Contribute#pull-requests\n* Associate an issue with the Pull Request.\n* Ensure that the code is up-to-date with the `main` branch.\n* Include a description of the proposed changes and how to test them.\n-->\n",
      "diff": "diff --git a/src/vs/workbench/api/common/extHostMcp.ts b/src/vs/workbench/api/common/extHostMcp.ts\nindex 8af30bbae96a8..2ba109ae71a7d 100644\n--- a/src/vs/workbench/api/common/extHostMcp.ts\n+++ b/src/vs/workbench/api/common/extHostMcp.ts\n@@ -19,6 +19,7 @@ import * as Convert from './extHostTypeConverters.js';\n import { AUTH_SERVER_METADATA_DISCOVERY_PATH, getDefaultMetadataForUrl, getMetadataWithDefaultValues, IAuthorizationProtectedResourceMetadata, IAuthorizationServerMetadata, isAuthorizationProtectedResourceMetadata, isAuthorizationServerMetadata, parseWWWAuthenticateHeader } from '../../../base/common/oauth.js';\n import { URI } from '../../../base/common/uri.js';\n import { MCP } from '../../contrib/mcp/common/modelContextProtocol.js';\n+import { CancellationError } from '../../../base/common/errors.js';\n \n export const IExtHostMpcService = createDecorator<IExtHostMpcService>('IExtHostMpcService');\n \n@@ -264,11 +265,7 @@ class McpHTTPHandle extends Disposable {\n \n \t\tif (this._mode.value === HttpMode.Unknown && res.status >= 400 && res.status < 500) {\n \t\t\tthis._log(LogLevel.Info, `${res.status} status sending message to ${this._launch.uri}, will attempt to fall back to legacy SSE`);\n-\t\t\tconst endpoint = await this._attachSSE();\n-\t\t\tif (endpoint) {\n-\t\t\t\tthis._mode = { value: HttpMode.SSE, endpoint };\n-\t\t\t\tawait this._sendLegacySSE(endpoint, message);\n-\t\t\t}\n+\t\t\tthis._sseFallbackWithMessage(message);\n \t\t\treturn;\n \t\t}\n \n@@ -294,7 +291,15 @@ class McpHTTPHandle extends Disposable {\n \t\t}\n \n \t\t// Not awaited, we don't need to block the sequencer while we read the response\n-\t\tthis._handleSuccessfulStreamableHttp(res);\n+\t\tthis._handleSuccessfulStreamableHttp(res, message);\n+\t}\n+\n+\tprivate async _sseFallbackWithMessage(message: string) {\n+\t\tconst endpoint = await this._attachSSE();\n+\t\tif (endpoint) {\n+\t\t\tthis._mode = { value: HttpMode.SSE, endpoint };\n+\t\t\tawait this._sendLegacySSE(endpoint, message);\n+\t\t}\n \t}\n \n \tprivate async _populateAuthMetadata(originalResponse: Response): Promise<void> {\n@@ -428,7 +433,7 @@ class McpHTTPHandle extends Disposable {\n \t\tthrow new Error(`Invalid authorization server metadata: ${JSON.stringify(body)}`);\n \t}\n \n-\tprivate async _handleSuccessfulStreamableHttp(res: Response) {\n+\tprivate async _handleSuccessfulStreamableHttp(res: Response, message: string) {\n \t\tif (res.status === 202) {\n \t\t\treturn; // no body\n \t\t}\n@@ -438,6 +443,11 @@ class McpHTTPHandle extends Disposable {\n \t\t\t\tconst parser = new SSEParser(event => {\n \t\t\t\t\tif (event.type === 'message') {\n \t\t\t\t\t\tthis._proxy.$onDidReceiveMessage(this._id, event.data);\n+\t\t\t\t\t} else if (event.type === 'endpoint') {\n+\t\t\t\t\t\t// An SSE server that didn't correctly return a 4xx status when we POSTed\n+\t\t\t\t\t\tthis._log(LogLevel.Warning, `Received SSE endpoint from a POST to ${this._launch.uri}, will fall back to legacy SSE`);\n+\t\t\t\t\t\tthis._sseFallbackWithMessage(message);\n+\t\t\t\t\t\tthrow new CancellationError(); // just to end the SSE stream\n \t\t\t\t\t}\n \t\t\t\t});\n \n",
      "author": "connor4312",
      "repo": "microsoft/vscode",
      "labels": [],
      "expected_technical": null,
      "expected_marketing": null,
      "difficulty": "easy",
      "category": "feature"
    }
  ]
}